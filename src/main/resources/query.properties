associationControl = match (p1:Protein{uniprot_id:$acc1}), (p2:Protein{uniprot_id:$acc2}) \
                     optional match p=shortestPath((p1)-[:protein_have_association*]-(p2)) \
                     return case when length(p)>0 \
                     then [n IN nodes(p)|n.uniprot_id] ELSE [] END as path
singleProteinSearch = match (p1:Protein{uniprot_id:$acc1})-[:protein_have_association]->(a:Association{organism_id:9606})<-[:protein_have_association]-(p2:Protein) \
                      where a.jaccard_score>=$jacc \
                      optional match (g1:Gene:Entrez)-[:gene_have_protein]->(p1) \
                      optional match (g2:Gene:Entrez)-[:gene_have_protein]->(p2) \
                      return distinct a.association_id as associationId, \
                      p1.uniprot_id as p1_acc, p1.protein_name as p1_name, p1.entry_name as p1_entry_name, p1.organism_id as p1_species, \
                      p1.sequence_length as p1_sequence_length,p1.status as p1_status, \
                      collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.entrez_id) as p1_gene_id, \
                      p2.uniprot_id as p2_acc,p2.protein_name as p2_name, p2.entry_name as p2_entry_name, p2.organism_id as p2_species, \
                      p2.sequence_length as p2_sequence_length,p2.status as p2_status, \
                      collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.entrez_id) as p2_gene_id, \
                      toFloat(a.jaccard_score) as jacc_sim_score,a.interaction as interact,a.paralog as paralog, \
                      a.common_assay_count as common_assay_count, a.complex_count as distinct_comp, \
                      a.leaf_pathway_count as distinct_path2, count(a.project_count) as common_project_size
associationIdSearch = match (p1:Protein{uniprot_id:$acc1})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_id:$acc2}) \
                      where a.jaccard_score>=$jacc
                      return distinct a.association_id
doubleProteinSearch = match (p1:Protein{uniprot_id:$acc1})-[:protein_have_association]->(a:Association{organism_id:$taxonomyId})<-[:protein_have_association]-(p2:Protein{uniprot_id:$acc2}) \
                      where a.jaccard_score>=$jacc \
                      optional match (g1:Gene:Entrez)-[:gene_have_protein]->(p1) \
                      optional match (g2:Gene:Entrez)-[:gene_have_protein]->(p2) \
                      return distinct a.association_id as associationId, \
                      p1.uniprot_id as p1_acc, p1.protein_name as p1_name, p1.entry_name as p1_entry_name, p1.organism_id as p1_species, \
                      p1.sequence_length as p1_sequence_length,p1.status as p1_status, \
                      collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.entrez_id) as p1_gene_id, \
                      p2.uniprot_id as p2_acc,p2.protein_name as p2_name, p2.entry_name as p2_entry_name, p2.organism_id as p2_species, \
                      p2.sequence_length as p2_sequence_length,p2.status as p2_status, \
                      collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.entrez_id) as p2_gene_id, \
                      toFloat(a.jaccard_score) as jacc_sim_score,a.interaction as interact,a.paralog as paralog, \
                      a.common_assay_count as common_assay_count, a.complex_count as distinct_comp, \
                      a.leaf_pathway_count as distinct_path2, count(a.project_count) as common_project_size 

projectSearch = match (p1:Protein{uniprot_id:$acc1})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_id:"Q01780"}) \
                where a.jaccard_score>=$jacc \
                match (pj:Project) where pj.pride_accession in a.projects  \
                return pj.pride_accession as project_accession, pj.keywords as keywords, pj.project_tag as tags, \
                pj.tissues as tissue, pj.instruments as instruments, pj.experiment_type  as experiment_type
IntActSearch= match  (a:Association{association_id:$associationId})-[:association_have_intact]->(it:Intact) \
              return a.association_id as associationId,it.intact_id as intact_id, it.confidence as confidenceValue, \
              it.detection_method as intact_detection, it.interaction_type as intact_interaction_type

BiogridSearch= match  (a:Association{association_id:$associationId})-[:association_have_biogrid]->(b:Biogrid) \
               return a.association_id as associationId,b.biogrid_id as biogridId, \
               b.experiment_system as experiment_name,b.experiment_type as experiment_type, \
               b.confidence as score, b.throughput as throughput

pathwaySearch = match  (a:Association{association_id:$associationId})-[:association_involve_in_leafpath]->(lp:LeafPath) \
                return distinct lp.reactome_id as reactome_accession,lp.pathway_name as pathway_name

complexSearch = match  (a:Association{association_id:$associationId})-[:association_involve_in_complex]->(cx:Complex) \
                return cx.corum_id as corum_id,cx.complex_name as complex_name,cx.comment as complex_comment, \
                cx.publications as pubmed_id ,cx.cell_line as cell_line,cx.purification_method  as purification_method, \
                cx.disease_comment as disease_comment, cx.go_description as go_description

GOSearch= match (p1:Protein{uniprot_id:$acc1})-[:protein_have_go]-(g:GO)-[:protein_have_go]-(p2:Protein{uniprot_id:$acc2}) \
          return  g.go_id as go_id, g.go_name as go_name, labels(g) as label


diseaseSearch = match  (a:Association{association_id:$associationId})-[:association_involve_in_disease]->(d:Disease) \
                return d.disgenet_id as disgenet_id,d.disease_name as disease_name

searchByGeneSingle = match (g:Entrez{organism_id:$taxonomyId})-[:gene_have_protein]->(p1:Protein), \
                     (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(:Protein), \
                     (g:Entrez)-[:entrez_have_ensembl]->(n:Ensembl) \
                     where $gene1 =  g.gene_name or $gene1 in g.entrez_id \
                     return distinct p1.uniprot_id as uniprot_id1, p1.protein_name  as protein_name1, \
                     g.gene_name as gene_name1, collect(distinct n.ensembl_id) as ensembleId1, p1.organism_id as species1

searchByGeneDouble = match (g1:Entrez{organism_id:$taxonomyId})-[:gene_have_protein]->(p1:Protein), \
                     (g2:Entrez{organism_id:$taxonomyId})-[:gene_have_protein]->(p2:Protein), \
                     (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2), \
                     (g1)-[:entrez_have_ensembl]->(n1:Ensembl),(g2)-[:entrez_have_ensembl]->(n2:Ensembl) \
                     where ($gene1 =  g1.gene_name or $gene1 in g1.entrez_id) and ($gene2 = g2.gene_name or $gene2 in g2.entrez_id) \
                     return p1.uniprot_id as uniprot_id1, p2.uniprot_id as uniprot_id2, p1.protein_name as protein_name1,p2.protein_name as protein_name2, \
                     g1.gene_name as gene_name1, collect(distinct n1.ensembl_id) as ensembleId1, g2.gene_name as gene_name2, collect(distinct n2.ensembl_id) as ensembleId2 , \
                     toFloat(a.jaccard_score) as jacc_sim_score, p1.organism_id as species1, p2.organism_id as species2
searchByGeneMultiple = unwind ["NOC2L","ACTRT2","CA6","NOL9","DFFA","4513"] as first \
                       match (g:Entrez{organism_id:$taxonomyId})-[:gene_have_protein]->(p1:Protein), \
                       (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(:Protein), \
                       (g:Entrez)-[:entrez_have_ensembl]->(n:Ensembl) \
                       where first in  g.gene_name or first in g.entrez_id \
                       return distinct p1.uniprot_id as uniprot_id1, p1.protein_name  as protein_name1, \
                       g.gene_name as gene_name1, collect(distinct n.ensembl_id) as ensembl1, p1.organism_id as species1
searchByProteinNameSingle = match (p1:Protein)<-[:gene_have_protein]-(g:Gene) \
                            where p1.protein_name =~ '(?i).*Rho.*' \
                            return p1.protein_name  as protein_name1,p1.uniprot_id as uniprot_id1,collect(distinct g.gene_name) as gene_name1, \
                            p1.organism_id as species1

searchByProteinNameDouble = match (p1:Protein)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein), \
                            (p1)<-[:gene_have_protein]-(g1:Gene), (p2)<-[:gene_have_protein]-(g2:Gene) \
                            where p1.protein_name =~ '(?i).*ANAPHASE.*' and p2.protein_name=~ '(?i).*EXOSOME.*' \
                            return p1.uniprot_id as uniprot_id1, p1.protein_name as protein_name1,collect(distinct g1.gene_name) as gene_name1, \
                            p2.protein_name as protein_name2 ,p2.uniprot_id as uniprot_id2,collect(distinct g2.gene_name) as gene_name2,  toFloat(a.jaccard_score) as jacc_sim_score, \
                            p1.organism_id as species1, p2.organism_id as species2

searchByPathway = match (F:Pathway) \
                  where toUpper(F.pathway_name)=~ '(?i).*signal transduction.*' or F.reactome_id='signal transduction' \
                  return F.reactome_id,F.pathway_name, labels(F)

hierarchySearch= match p=(F:Pathway{reactome_id:$reactomeAccession})-[:pathway_have_sub_pathway*]->(L:LeafPath) \
                 return [n in nodes(p)|n.reactome_id] as leaf_pathway_reactome_acc, [n in nodes(p)|n.pathway_name] as leaf_pathway_name

findProteinsByPathway = match (p1:Protein)<-[:leaf_path_have_protein]-(L:Pathway:Leaf_node{reactome_accession:{reactomeAccession}})-[:leaf_path_have_protein]->(p2:Protein), (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2) \
						return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
						p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score

searchByDisease = match (p1:Protein)-[:protein_present_in_disease]->(d:Disease)<-[:protein_present_in_disease]-(p2:Protein), (p1)-[:protein_have_association]->(a:Association:Human)<-[:protein_have_association]-(p2) \
			where a.jaccard_score>={jacc} and (d.disgenet_id={disease} or toUpper(d.disease_name)=~ {disease})\
			return DISTINCT count(distinct a), d.disgenet_id as disgenet_id, d.disease_name as disease_name, p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
			p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score

oneToOneSearch = with {array1} AS array_one,  {array2} AS array_two \
				UNWIND RANGE(0, SIZE(array_one) - 1) AS i \
				match (p1:Protein{uniprot_accession:array_one[i]})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:array_two[i]}) \
				where toFLOAT(a.jaccard_score)>={jacc} \
				optional match (p1)-[:protein_form_complex]->(comp:Complex)<-[:protein_form_complex]-(p2) \
				optional match (g1:Gene)-[:translate_into_protein]->(p1) \
				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
				optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
				optional match (p1)-[pg:is_paralog_of]-(p2) \
        		return distinct a.association_id as associationId, \
				p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
				collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
				p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name,p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count

oneToOneSearchMouse =  with {array1} AS array_one,  {array2} AS array_two \
				UNWIND RANGE(0, SIZE(array_one) - 1) AS i \
				match (p1:Protein{uniprot_accession:array_one[i],species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein{uniprot_accession:array_two[i],species_id:'10090'}) \
				where toFLOAT(a.jaccard_score)>={jacc} \
				optional match (p1)-[:protein_form_complex]->(comp:Complex)<-[:protein_form_complex]-(p2) \
				optional match (g1:Gene)-[:translate_into_protein]->(p1) \
				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
				optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
				optional match (p1)-[pg:is_paralog_of]-(p2) \
        		return distinct a.association_id as associationId, \
				p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name,  p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
				collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
				p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name,  p2.species_id as p2_species, p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count
findProteinsByTissue = match (p1:Protein)-[:protein_present_in_tissue]-(t:Tissues:HPA)-[:protein_present_in_tissue]-(p2:Protein),(p1)-[:protein_have_association]-(a:Association)-[:protein_have_association]-(p2) \
						where t.tissue_name= {tissueName} and a.jaccard_score>={jacc} \
				return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
						p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score, t.tissue_name as tissue_name
singleProteinSearchMouse =match (p1:Protein{uniprot_accession:{acc1},species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
					unwind g1.gene_name as gn1_name \
					unwind g1.gene_id as gn1_id \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
     				unwind g2.gene_name as gn2_name \
     				unwind g2.gene_id as gn2_id \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct gn1_name) as p1_gene_name, collect(distinct gn1_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species,p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct gn2_name) as p2_gene_name, collect(distinct gn2_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size

doubleProteinSearchMouse =match (p1:Protein{uniprot_accession:{acc1},species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2},species_id:'10090'}) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
					unwind g1.gene_name as gn1_name \
					unwind g1.gene_id as gn1_id \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
     				unwind g2.gene_name as gn2_name \
     				unwind g2.gene_id as gn2_id \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct gn1_name) as p1_gene_name, collect(distinct gn1_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species, p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct gn2_name) as p2_gene_name, collect(distinct gn2_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size