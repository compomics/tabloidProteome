associationControl = match (p1:Protein{uniprot_accession:{acc1}}), (p2:Protein{uniprot_accession:{acc2}}) \
										 optional match p=((p1)-[r*1..2]-(p2)) WHERE All(a IN relationships(p) WHERE toFLOAT(a.jacc_sim_score)>={jacc}) \
										 return case when length(p)>0 then extract(n IN nodes(p)|n.uniprot_accession) ELSE [] END as path order by length(p) limit 1

singleProteinSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein) \
					  where toFLOAT(a.jacc_sim_score)>={jacc} \
        			  optional match (p1)-[:protein_form_complex]-(comp:Complex)-[:protein_form_complex]-(p2) \
        			  optional match (p2)-[:protein_involved_in_leaf_pathway]-(path2:Pathway)-[:protein_involved_in_leaf_pathway]-(p1) \
        			  return  p1.uniprot_accession as p1_acc, p2.uniprot_accession as p2_acc, p1.protein_name as p1_name, p2.protein_name as p2_name, \
        			  p1.gene_name as p1_gene_name, p1.gene_id as p1_gene_id, p1.species as p1_species, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.length as p1_length, \
        			  p1.uniport_status as p1_uniport_status, \
        			  p2.gene_name as p2_gene_name, p2.gene_id as p2_gene_id, p2.species as p2_species, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.length as p2_length, \
        			  p2.uniport_status as p2_uniport_status, \
        		 	  a.jacc_sim_score as jacc_sim_score, a.interact as interact, a.paralog as paralog, a.common_assay_count as common_assay_count,  \
        			  count(distinct comp) as distinct_comp, count(distinct path2) as distinct_path2, size(a.common_project) as common_project_size
        			  
doubleProteinSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
					  where toFLOAT(a.jacc_sim_score)>={jacc} \
        			  optional match (p1)-[:protein_form_complex]-(comp:Complex)-[:protein_form_complex]-(p2) \
        			  optional match (p2)-[:protein_involved_in_leaf_pathway]-(path2:Pathway)-[:protein_involved_in_leaf_pathway]-(p1) \
        			  return  p1.uniprot_accession as p1_acc, p2.uniprot_accession as p2_acc, p1.protein_name as p1_name, p2.protein_name as p2_name, \
        			  p1.gene_name as p1_gene_name, p1.gene_id as p1_gene_id, p1.species as p1_species, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.length as p1_length, \
        			  p1.uniport_status as p1_uniport_status, \
        			  p2.gene_name as p2_gene_name, p2.gene_id as p2_gene_id, p2.species as p2_species, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.length as p2_length, \
        			  p2.uniport_status as p2_uniport_status, \
        		 	  a.jacc_sim_score as jacc_sim_score, a.interact as interact, a.paralog as paralog, a.common_assay_count as common_assay_count,  \
        			  count(distinct comp) as distinct_comp, count(distinct path2) as distinct_path2, size(a.common_project) as common_project_size
        			  
projectSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}})  \
        		match (pj:Project) where pj.project_accession in a.common_project  \
        		return distinct p1.uniprot_accession as p1_acc, p2.uniprot_accession as p2_acc, a.common_assay_count as common_assay_count ,  \
        		size(a.common_project) as common_project_size, pj.project_accession as project_accession, pj.keywords as keywords,  \
        		pj.tissue as tissue, pj.tags as tags, pj.instruments as instruments
        		
associationSearch = MATCH (p1:Protein {uniprot_accession:{acc1}})-[ass:associate|low_score_association]-(p2:Protein {uniprot_accession:{acc2}}) \
					return ass.intact_confidence as intact_confidence, ass.intact_detection as intact_detection, \
					ass.intact_interaction_type as intact_interaction_type, toFloat(ass.jacc_sim_score) as jacc_sim_score, ass.interact as interact, \
					ass.paralog as paralog, toString(ass.common_assay_count) as common_assay_count, ass.intact as intact, ass.biogrid as biogrid
					
pathwaySearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				optional match (p2)-[:protein_involved_in_leaf_pathway]-(path2:Pathway)-[:protein_involved_in_leaf_pathway]-(p1) \
				return  distinct path2.reactome_accession as reactome_accession, path2.pathway_name as pathway_name, path2.evidence_code as evidence_code

complexSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				optional match (p1)-[:protein_form_complex]-(comp:Complex)-[:protein_form_complex]-(p2) \
				return comp.corum_id as corum_id, comp.complex_name as complex_name, comp.complex_comment as complex_comment, \
				comp.cell_line as cell_line, comp.disease_comment as disease_comment, comp.subunit_comment as subunit_comment, \
				comp.pubmed_id as pubmed_id, comp.purification_method as purification_method
				
commonMFSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				 optional match (p1)-[:protein_have_go]-(mf:MF)-[:protein_have_go]-(p2) \
				 return  mf.go_id as go_id, mf.go_name as go_name
				
commonBPSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				 optional match (p1)-[:protein_have_go]-(bp:BP)-[:protein_have_go]-(p2) \
				 return  bp.go_id as go_id, bp.go_name as go_name	
				 		
commonCCSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				 optional match (p1)-[:protein_have_go]-(cc:CC)-[:protein_have_go]-(p2) \
				 return  cc.go_id as go_id,cc.go_name as go_name		
				 
diseaseSearch = match (p1:Protein{uniprot_accession:{acc1}})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				match (p1)-[:protein_present_in_disease]->(dis:Disease)<-[:protein_present_in_disease]-(p2) \
				return dis.disgenet_id as disgenet_id, dis.disease_name as disease_name
				
searchByGeneSingle = match (p:Protein) where {gene1} in  p.gene_name or {gene1} in p.gene_id return p.uniprot_accession as uniprot_accession1, \
			         p.protein_name as protein_name1, p.gene_name as gene_name1
searchByGeneDouble = match (p1:Protein)-[a:associate|low_score_association]-(p2:Protein) where ({gene1} in  p1.gene_name or {gene1} in p1.gene_id ) and ({gene2} in  p2.gene_name or {gene2} in p2.gene_id ) \
					return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, p1.gene_name as gene_name1 , \
					p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, p2.gene_name as gene_name2, toFloat(a.jacc_sim_score) as jacc_sim_score
searchByProteinNameSingle = match (p1:Protein) where p1.protein_name =~ {proteinName1} \
							return  p1.protein_name  as protein_name1,p1.uniprot_accession	as uniprot_accession1, p1.gene_name as gene_name1
searchByProteinNameDouble = match (p1:Protein)-[a:associate|low_score_association]-(p2:Protein) \
							where p1.protein_name =~ {proteinName1} and p2.protein_name =~ {proteinName2} and toFLOAT(a.jacc_sim_score)>={jacc} \
							return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, p1.gene_name as gene_name1 ,p2.uniprot_accession \
							as uniprot_accession2, p2.protein_name as protein_name2,p2.gene_name as gene_name2, toFloat(a.jacc_sim_score) as jacc_sim_score	
searchByPathway = MATCH (p:Pathway) where toUpper(p.pathway_name)=~ {pathway} or p.reactome_accession= {pathway} \
									RETURN p.pathway_name as pathway_name, p.reactome_accession as reactome_accession
					
findProteinsByPathway = match (p1:Protein)-[:protein_involved_in_leaf_pathway]-(T:Pathway)-[:protein_involved_in_leaf_pathway]-(p2:Protein) \
												match (p1)-[a:associate|low_score_association]->(p2) where T.reactome_accession={reactomeAccession} \
												return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
												p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jacc_sim_score) as jacc_sim_score
												
searchByDisease = MATCH (d:Disgenet) where toUpper(d.disease_name)=~ {disease} or d.disgenet_id= {disease} \
									RETURN d.disgenet_id as disgenet_id, d.disease_name as disease_name
					
findProteinsByDisease = match (p1:Protein)-[:protein_present_in_disease]-(D:Disease)-[:protein_present_in_disease]-(p2:Protein)\
												match (p1)-[a:associate]->(p2) where D.disgenet_id={disgenetId}\
												return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
												p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jacc_sim_score) as jacc_sim_score
oneToOneSearch = with {array1} AS array_one, {array2} AS array_two UNWIND RANGE(0, SIZE(array_one) - 1) AS i \
				 match (p1:Protein{uniprot_accession:array_one[i]})-[a:associate|low_score_association]-(p2:Protein{uniprot_accession:array_two[i]}) \
				 where toFLOAT(a.jacc_sim_score)>={jacc} optional match (p1)-[:protein_form_complex]-(comp:Complex)-[:protein_form_complex]-(p2) \
				 optional match (p2)-[:protein_involved_in_leaf_pathway]-(path2:Pathway)-[:protein_involved_in_leaf_pathway]-(p1) \
				 return p1.uniprot_accession as p1_acc, p2.uniprot_accession as p2_acc, p1.protein_name as p1_name, p2.protein_name as p2_name, \
        		 p1.gene_name as p1_gene_name, p1.gene_id as p1_gene_id, p1.species as p1_species, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.length as p1_length, \
        		 p1.uniport_status as p1_uniport_status, \
        		 p2.gene_name as p2_gene_name, p2.gene_id as p2_gene_id, p2.species as p2_species, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.length as p2_length, \
        		 p2.uniport_status as p2_uniport_status, \
        		 a.jacc_sim_score as jacc_sim_score, a.interact as interact, a.paralog as paralog, a.common_assay_count as common_assay_count,  \
        		 count(distinct comp) as distinct_comp, count(distinct path2) as distinct_path2, size(a.common_project) as common_project_size

												