associationControl = match (p1:Protein{uniprot_accession:{acc1}}), (p2:Protein{uniprot_accession:{acc2}}) \
					optional match p=shortestPath((p1)-[:protein_have_association*]-(p2)) \
                    return case when length(p)>0 \
					then extract(n IN nodes(p)|n.uniprot_accession) ELSE [] END as path
singleProteinSearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					optional match (p1)-[:protein_present_in_disease]->(d:Disease)<-[:protein_present_in_disease]-(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species, p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size
doubleProteinSearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2}}) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					optional match (p1)-[:protein_present_in_disease]->(d:Disease)<-[:protein_present_in_disease]-(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name,p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species,p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size

projectSearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				where a.jaccard_score>={jacc} \
				match (pj:Project) where pj.project_accession in a.common_project \
				optional match (pj)-[:project_include_tissue]-(t:Tissues) \
				optional match (pj)-[:project_uses_instrument]-(i:Instruments) \
				optional match (pj)-[:project_is_experiment_type]-(et:ExperimentType) \
				return pj.project_accession as project_accession, collect(distinct pj.keywords) as keywords, collect(distinct pj.tags) as tags, \
				collect(distinct t.tissue_name) as tissue, collect(distinct i.instrument_name) as instruments, collect(distinct et.experiment_type)  as experiment_type\
        		
IntActSearch= match  (a:Association{association_id:{associationId}})-[:association_have_interaction]->(i:Common_Interaction) \
				optional match (i)-[ait:interaction_include_intact]-(it:IntAct) \
				return a.association_id as associationId,it.intact_id as intact_id, ait.confidenceValue as confidenceValue,ait.interaction_detection as intact_detection, ait.interaction_type as intact_interaction_type

BiogridSearch= match  (a:Association{association_id:{associationId}})-[:association_have_interaction]->(i:Common_Interaction) \
				optional match (i)-[ab:interaction_include_biogrid]-(b:BioGRID) \
				return a.association_id as associationId,b.biogrid_id as biogridId, ab.experiment_name as experiment_name,ab.experiment_type as experiment_type,ab.modification as modification,toFloat(ab.score) as score, ab.throughput as throughput
	
pathwaySearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2}}) \
					where a.jaccard_score>={jacc} \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					return distinct lp.reactome_accession as reactome_accession,lp.evidence_code as evidence_code,lp.pathway_name as pathway_name

complexSearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2}}) \
					where a.jaccard_score>={jacc} \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
				return cx.corum_id as corum_id,cx.complex_name as complex_name,cx.complex_comment as complex_comment, \
				cx.pubmed_id as pubmed_id ,cx.cell_line as cell_line,cx.purification_method  as purification_method, \
				cx.disease_comment as disease_comment, cx.subunit_comment as subunit_comment
				
GOSearch= match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_go]-(g:GO)-[:protein_have_go]-(p2:Protein{uniprot_accession:{acc2}}) \
		return  g.go_id as go_id, g.go_name as go_name, labels(g) as label
				
				 
diseaseSearch = match (p1:Protein{uniprot_accession:{acc1}})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2}}) \
				where a.jaccard_score>={jacc} \
				optional match (p1)-[pd1:protein_present_in_disease]->(d:Disease)<-[pd2:protein_present_in_disease]-(p2) \
				return d.disgenet_id as disgenet_id,d.disease_name as disease_name
				
searchByGeneSingle = match (g:Gene)-[:translate_into_protein]->(p1:Protein), (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(:Protein), \
					(g:Gene)<-[:species_have_gene]-(s:Species{species_id:{species}}) \
					where {gene1} =  toUpper(g.gene_name[0]) or {gene1} in g.gene_id \
					unwind g.gene_name as gn_name \
					unwind g.ensembl_id as gn_id \
					return distinct p1.uniprot_accession as uniprot_accession1, p1.protein_name  as protein_name1, collect(distinct gn_name) as gene_name1, collect(distinct gn_id) as gene_id1, \
					p1.species_id as species1

searchByGeneDouble = match (g1:Gene)-[:translate_into_protein]->(p1:Protein), (g2:Gene)-[:translate_into_protein]->(p2:Protein),(p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2), \
				(g:Gene)<-[:species_have_gene]-(s:Species{species_id:{species}}) \
				where ({gene1} =  toUpper(g1.gene_name[0]) or {gene1} in g1.gene_id) and ({gene2}  =  toUpper(g2.gene_name[0]) or {gene2} in g2.gene_id) \
				unwind g1.gene_name as gn1_name \
				unwind g1.ensembl_id as gn1_id \
				unwind g2.gene_name as gn2_name \
				unwind g2.ensembl_id as gn2_id \
				return p1.uniprot_accession as uniprot_accession1, p2.uniprot_accession as uniprot_accession2, p1.protein_name as protein_name1,p2.protein_name as protein_name2, \
				collect(distinct gn1_name) as gene_name1, collect(distinct gn1_id) as gene_id1, collect(distinct gn2_name) as gene_name2, collect(distinct gn2_id)  as gene_id2 , toFloat(a.jaccard_score) as jacc_sim_score, \
				p1.species_id as species1, p2.species_id as species2
searchByGeneMultiple = unwind ["PIR","MTA1","CHD3","GATAD2B","CHD5","25942"] as first \
						match (g:Gene)-[:translate_into_protein]->(p1:Protein), (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(:Protein), \
						(g:Gene)<-[:species_have_gene]-(s:Species{species_id:{species}}) \
						where first in  g.gene_name or first in g.gene_id \
						unwind g.gene_name as gn_name \
						unwind g.ensembl_id as gn_id \
						return distinct p1.uniprot_accession as uniprot_accession1, p1.protein_name  as protein_name1, collect(distinct gn_name) as gene_name1, collect(distinct gn_id) as gene_id1, \
						p1.species_id as species1
searchByProteinNameSingle = match (p1:Protein)<-[:translate_into_protein]-(g:Gene) \
							where p1.protein_name =~ {proteinName1} \
							return p1.protein_name  as protein_name1,p1.uniprot_accession as uniprot_accession1,collect(distinct g.gene_name) as gene_name1, p1.species_id as species1

searchByProteinNameDouble = match (p1:Protein)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein), \
							(p1)<-[:translate_into_protein]-(g1:Gene), (p2)<-[:translate_into_protein]-(g2:Gene) \
							where p1.protein_name =~ {proteinName1} and p2.protein_name=~ {proteinName2} \
							return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1,collect(distinct g1.gene_name) as gene_name1, \
							p2.protein_name as protein_name2 ,p2.uniprot_accession as uniprot_accession2,collect(distinct g2.gene_name) as gene_name2,  toFloat(a.jaccard_score) as jacc_sim_score, \
							p1.species_id as species1, p2.species_id as species2

searchByPathway = match (F:Pathway) \
				where toUpper(F.pathway_name)=~ {pathway} or F.reactome_accession={pathway} \
				return F.reactome_accession as reactome_accession,F.pathway_name as pathway_name, labels(F) as label
					
hierarchySearch=match p=(F:Pathway{reactome_accession:{reactomeAccession}})-[:path_have_subpath*]->(L:Leaf_node) \
				return extract(n in nodes(p)|n.reactome_accession) as leaf_pathway_reactome_acc, extract(n in nodes(p)|n.pathway_name) as leaf_pathway_name
				
findProteinsByPathway = match (p1:Protein)<-[:leaf_path_have_protein]-(L:Pathway:Leaf_node{reactome_accession:{reactomeAccession}})-[:leaf_path_have_protein]->(p2:Protein), (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2) \
						return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
						p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score

searchByDisease = match (p1:Protein)-[:protein_present_in_disease]->(d:Disease)<-[:protein_present_in_disease]-(p2:Protein), (p1)-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2) \
			where a.jaccard_score>={jacc} and (d.disgenet_id={disease} or toUpper(d.disease_name)=~ {disease})\
			return DISTINCT count(distinct a), d.disgenet_id as disgenet_id, d.disease_name as disease_name, p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
			p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score

oneToOneSearch = with {array1} AS array_one,  {array2} AS array_two \
				UNWIND RANGE(0, SIZE(array_one) - 1) AS i \
				match (p1:Protein{uniprot_accession:array_one[i]})-[:protein_have_association]->(a:Association)<-[:protein_have_association]-(p2:Protein{uniprot_accession:array_two[i]}) \
				where toFLOAT(a.jaccard_score)>={jacc} \
				optional match (p1)-[:protein_form_complex]->(comp:Complex)<-[:protein_form_complex]-(p2) \
				optional match (g1:Gene)-[:translate_into_protein]->(p1) \
				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
				optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
				optional match (p1)-[pg:is_paralog_of]-(p2) \
        		return distinct a.association_id as associationId, \
				p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
				collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
				p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name,p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count

oneToOneSearchMouse =  with {array1} AS array_one,  {array2} AS array_two \
				UNWIND RANGE(0, SIZE(array_one) - 1) AS i \
				match (p1:Protein{uniprot_accession:array_one[i],species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein{uniprot_accession:array_two[i],species_id:'10090'}) \
				where toFLOAT(a.jaccard_score)>={jacc} \
				optional match (p1)-[:protein_form_complex]->(comp:Complex)<-[:protein_form_complex]-(p2) \
				optional match (g1:Gene)-[:translate_into_protein]->(p1) \
				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
				optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
				optional match (p1)-[pg:is_paralog_of]-(p2) \
        		return distinct a.association_id as associationId, \
				p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name,  p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
				collect(distinct g1.gene_name) as p1_gene_name, collect(distinct g1.gene_id) as p1_gene_id, \
				p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name,  p2.species_id as p2_species, p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                collect(distinct g2.gene_name) as p2_gene_name, collect(distinct g2.gene_id) as p2_gene_id, \
                toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count
findProteinsByTissue = match (p1:Protein)-[:protein_present_in_tissue]-(t:Tissues:HPA)-[:protein_present_in_tissue]-(p2:Protein),(p1)-[:protein_have_association]-(a:Association)-[:protein_have_association]-(p2) \
						where t.tissue_name= {tissueName} and a.jaccard_score>={jacc} \
				return p1.uniprot_accession as uniprot_accession1, p1.protein_name as protein_name1, \
						p2.uniprot_accession as uniprot_accession2, p2.protein_name as protein_name2, toFloat(a.jaccard_score) as jacc_sim_score, t.tissue_name as tissue_name
singleProteinSearchMouse =match (p1:Protein{uniprot_accession:{acc1},species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
					unwind g1.gene_name as gn1_name \
					unwind g1.gene_id as gn1_id \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
     				unwind g2.gene_name as gn2_name \
     				unwind g2.gene_id as gn2_id \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct gn1_name) as p1_gene_name, collect(distinct gn1_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species,p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct gn2_name) as p2_gene_name, collect(distinct gn2_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size
                    
doubleProteinSearchMouse =match (p1:Protein{uniprot_accession:{acc1},species_id:'10090'})-[:protein_have_association]->(a:Association:Mouse)<-[:protein_have_association]-(p2:Protein{uniprot_accession:{acc2},species_id:'10090'}) \
					where a.jaccard_score>={jacc} \
					optional match (g1:Gene)-[:translate_into_protein]->(p1) \
					unwind g1.gene_name as gn1_name \
					unwind g1.gene_id as gn1_id \
     				optional match (g2:Gene)-[:translate_into_protein]->(p2) \
     				unwind g2.gene_name as gn2_name \
     				unwind g2.gene_id as gn2_id \
					optional match (a)-[:association_have_interaction]->(ci:Common_Interaction) \
					optional match (p1)-[pg:is_paralog_of]-(p2) \
					optional match (p1)-[:protein_form_complex]->(cx:Complex)<-[:protein_form_complex]-(p2) \
					optional match (p1)<-[:leaf_path_have_protein]-(lp:Leaf_node:Pathway)-[:leaf_path_have_protein]->(p2) \
					return distinct a.association_id as associationId, \
					p1.uniprot_accession as p1_acc, p1.protein_name as p1_name, p1.uniprot_entry_name as p1_uniprot_entry_name, p1.species_id as p1_species, p1.length as p1_length,p1.uniport_status as p1_uniport_status, \
					collect(distinct gn1_name) as p1_gene_name, collect(distinct gn1_id) as p1_gene_id, \
					p2.uniprot_accession as p2_acc,p2.protein_name as p2_name, p2.uniprot_entry_name as p2_uniprot_entry_name, p2.species_id as p2_species, p2.length as p2_length,p2.uniport_status as p2_uniport_status, \
                    collect(distinct gn2_name) as p2_gene_name, collect(distinct gn2_id) as p2_gene_id, \
                    toFloat(a.jaccard_score) as jacc_sim_score,toString(ci.interaction_id) as interact,pg as paralog, toString(a.common_assay_count) as common_assay_count,count(distinct cx) as distinct_comp,count(distinct lp) as distinct_path2, \
                    count(a.common_project) as common_project_size